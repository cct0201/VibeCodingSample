---
description: 
globs: docs/prd_*.md
alwaysApply: false
---
---
description: Generate structured system-level tasks from a product requirement document (PRD)
globs: docs/prd_*.md
alwaysApply: true
---

- **Purpose**: Enable sustainable task planning through a two-phase approach: system design summarization and task decomposition.

- **When to trigger**:
  - The document filename starts with `prd_`
  - The content includes a section titled `System Design`, `Architecture Overview`, or similar

- **Output Destination**:
  üìç **All generated tasks must be written into `docs/ai_article_site_tasks.md`.**
  Do not create new task files or split tasks across documents. Overwrite the content if necessary.

- **Expected Output Format**:
  - A Markdown table that includes the following columns:
    - `Task ID`
    - `Title`
    - `Est. Time` (S = <1 day, M = 1‚Äì3 days, L = >3 days)
    - `Dependencies` (list of task IDs or `-`)
    - `Acceptance Criteria` (use `<br>` to separate multiple items)

- **System Design Summary (optional)**:
  Before the task table, you may insert a high-level system design summary to clarify module boundaries.  
  This section should be written in Markdown and kept concise (‚â§ 10 lines), and may include:
    - Architecture Overview
    - Interfaces (API endpoints, events)
    - Key Models
    - Edge Cases

- **Prompt Template**:

Please analyze the PRD content and output the development tasks into the file tasks/ai_article_site_tasks.md.

Step 1: Briefly summarize the system design at the top of the file (optional). Step 2: Generate a task table in the following format:
Task ID | Title | Est. Time | Dependencies | Acceptance Criteria

Use concise and specific task titles. Break down each task to ~1‚Äì3 day granularity. Include logical dependencies and measurable acceptance criteria.

- **Example task row**:

| T003 | Create /get-articles endpoint | M | T001, T002 | Returns 3 unique URLs<br>Handles <3 source case<br>Returns valid JSON |


- **Best Practices**:
- Group related tasks together logically (e.g., backend setup, API, frontend)
- Maintain a consistent task ID prefix like `T001`, `T002`, etc.
- If subtasks are needed, use suffixes like `T004-1`, `T004-2`







