---
description: 
globs: 
alwaysApply: false
---
When editing `app.py` or other Flask application files:

*   **URL Generation:** Always use `url_for('endpoint_name', **kwargs)` to generate URLs for routes, rather than hardcoding paths (e.g., `/get-articles`). This helps maintain the application when routes change. Remember to import `url_for` from `flask`.
*   **JSON Responses:** Use `jsonify(data_dict)` to create JSON responses for API endpoints. It correctly sets the `Content-Type` header to `application/json`. Remember to import `jsonify` from `flask`.
*   **Configuration and Secrets:** Avoid directly hardcoding sensitive information (such as API keys, database credentials, secret keys) in the code. Use environment variables (via `os.environ.get()`) or dedicated configuration files/objects (e.g., `app.config.from_object()`). While not absolutely necessary for this simple demo, this is a crucial best practice in real applications.
*   **Error Handling:** Use the `@app.errorhandler(error_code_or_exception)` decorator to implement basic error handling. At a minimum, consider handling common errors such as 404 (`Not Found`) and 500 (`Internal Server Error`) to provide friendly error pages or JSON responses.
*   **Application Structure (Scalability):** For small applications like this demo, having everything in `app.py` is acceptable. However, for larger applications, consider using Flask `Blueprints` (`flask.Blueprint`) to organize the application into modular components. Consider this a good habit for future growth.
*   **Request Context:** Properly understand and use Flask's request context in route handlers (e.g., using the `request` object to access incoming data). Remember to import `request` from `flask`.