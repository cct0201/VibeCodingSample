---
description: 
globs: 
alwaysApply: false
---
- **Purpose**: Implement sustainable task planning through a two-phase approach: first system design summary, then task breakdown with individual task files.

- **Trigger timing**:
  - `docs/plan.md` file exists
  - Content includes sections titled `System Design`, `Architecture Overview` or similar

- **Output workflow**:
  üìç **First phase**: System design plan already exists in `docs/plan.md`.
  üìç **Second phase**: After the user reviews plan.md:
     - Create a summary task list in `docs/task.md`
     - Generate individual task files in `docs/tasks/task_id.md` for each task

- **Directory structure**:
  - Ensure `docs/tasks/` directory exists
  - Generate individual task files within this directory
  - Create an aggregated task summary in `docs/task.md`

- **Plan format (First phase)**:
  - High-level system design summary to clarify module boundaries:
    - Architecture overview
    - Interfaces (API endpoints, events)
    - Key models
    - Edge cases
  - Implementation strategy
  - Major technical considerations

- **Task summary format (docs/task.md)**:
  - JSON-like structure in markdown table format:
  - Table with columns:
    - `Task ID`
    - `Title`
    - `Description`
    - `Status` (TO-DO, IN-PROGRESS, REVIEW, DONE)
    - `Dependencies` (with status indicators: ‚úÖ completed, ‚è±Ô∏è pending)
    - `Priority` (High, Medium, Low)
  - Summary of all tasks with basic information
  - Status indicators to quickly identify task dependencies
  - **Accurate dependency status tracking**:
    - Always determine dependency status based on the actual status of the referenced task
    - For newly generated tasks where ALL tasks are TO-DO, ALL dependency status indicators must be ‚è±Ô∏è (pending)
    - Only mark a dependency as ‚úÖ (completed) when the referenced task explicitly has a status of DONE
    - Never assume a task is completed unless explicitly marked as DONE in the task list
    - When updating task statuses, cascade the status indicators for all dependencies

- **Individual task file format (docs/tasks/task_id.md)**:
  ```
  # Task ID: <id>
  # Title: <title>
  # Status: <status>
  # Dependencies: <comma-separated list of dependency IDs>
  # Priority: <priority>
  # Description: <brief description>
  
  # Details:
  <detailed implementation notes>
  
  # Test Strategy:
  <verification approach>
  ```

- **Prompt template (First phase)**:

Please analyze the PRD content and output the development plan to the file docs/plan.md.

Please provide the following:
1. A brief summary of the system design
2. Implementation strategy
3. Key technical considerations

Keep the content concise and clear, highlighting key design decisions and implementation directions.

- **Prompt template (Second phase)**:

Please generate specific development tasks based on the content of plan.md following these steps:

1. Create a task summary table in docs/task.md with the following format:
   | Task ID | Title | Description | Status | Dependencies | Priority |
   Include status indicators for dependencies (‚úÖ for completed, ‚è±Ô∏è for pending).

2. Create individual task files in docs/tasks/ directory with the following naming format: task_T001.md, task_T002.md, etc.
   Each task file should follow this structure:
   ```
   # Task ID: <id>
   # Title: <title>
   # Status: <status>
   # Dependencies: <comma-separated list of dependency IDs>
   # Priority: <priority>
   # Description: <brief description>
   # Estimated time: <S/M/L>
   
   # Details:
   <detailed implementation notes>
   
   # Acceptance Criteria:
   <verification criteria, one per line>
   
   # Test Strategy:
   <verification approach>
   ```

3. Ensure all tasks have:
   - Clear, descriptive titles
   - Appropriate dependencies
   - Detailed implementation instructions
   - Measurable acceptance criteria
   - Basic test strategy

- **Example task summary entry**:

| T003 | Create /get-articles endpoint | Implement API endpoint to return random article URLs | TO-DO | T001 ‚è±Ô∏è, T002 ‚è±Ô∏è | High |

- **Example task file (docs/tasks/task_T003.md)**:
```
# Task ID: T003
# Title: Create /get-articles endpoint
# Status: TO-DO
# Dependencies: T001, T002
# Priority: High
# Description: Implement API endpoint to return random article URLs
# Estimated time: M

# Details:
Create a GET endpoint at /get-articles that randomly selects 3 non-duplicate URLs from the article_sources list.
Use random.sample() to ensure uniqueness.
Handle edge cases when the source list has fewer than 3 items.
Return proper JSON response with error handling.

# Acceptance Criteria:
- Returns exactly 3 unique URLs when source list has ‚â•3 items
- Returns all available URLs when source list has <3 items
- Returns valid JSON in format {"articles": ["url1", "url2", "url3"]}
- Implements error handling with appropriate status codes

# Test Strategy:
Test the endpoint with various source list sizes:
- With >3 sources: verify 3 unique URLs returned
- With <3 sources: verify all sources returned
- Mock exceptions to verify error responses
```

- **Best practices**:
- Logically group related tasks (e.g., backend setup, API, frontend)
- Maintain consistent task ID prefixes, such as `T001`, `T002`, etc.
- Set appropriate priorities (High, Medium, Low) based on implementation sequence and importance
- For subtasks, use the format `T004-1`, `T004-2` in both filenames and references
- Initial status for new tasks should be set to `TO-DO`
- Task progress update order: TO-DO -> IN-PROGRESS -> REVIEW -> DONE
- Include detailed test strategies to validate when tasks are complete
- Update task status in both the summary file and individual task files
- **Status consistency rules**:
  - Verify status consistency before saving any task files
  - When initializing tasks, all tasks start in TO-DO status
  - Dependencies on TO-DO or IN-PROGRESS tasks must show ‚è±Ô∏è (pending) indicator
  - Dependencies on DONE tasks must show ‚úÖ (completed) indicator
  - NEVER guess or assume task statuses - only use explicitly defined statuses
  - When updating a task's status, update all dependent task files to reflect the new dependency status







